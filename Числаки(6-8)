Заданния 7, 8

#include <stdio.h>
#include <stdlib.h>
#include <iostream> 
#include <math.h>
#define N 1000
double F(double x) {
	return sqrt(1 + 5 * log(x)) / x;
}
using namespace std;
int main()
{
	int i, n;
	double a, b, h, Y[N], S, T;
	setlocale(LC_ALL, "Russian");
	cout << "\n Введите число отрезков : n = ";
	cin >> n;
	if (n % 2) n -= 1; //проверка на четность
	std::cout << "\n Введите начало интервала : a = ";
	std::cin >> a;
	std::cout << "\n Введите конец интервала : b = ";
	std::cin >> b;
	int x = a;
	int n2 = 0;
	for (x; x <= b; x++) {
		n += 1;
		h = (b - a) / n;
		for (i = 0; i <= n; i++) Y[i] = F(a + i * h);  //Заполнение массива Y=F(x)
		S = 0;
		for (i = 1; i < n; i += 2) {
			S += h * (Y[i - 1] + 4 * Y[i] + Y[i + 1]) / 3;
		} //Вычисление интеграла 
		std::cout << "\n Интеграл по методу Симпсона-Игнатьева " << S << " погрешность " << F(x) << " шаг " << h << "\n";
		//Вычисление интеграла методом трапеций для сравнения
		T = 0;
		for (i = 1; i <= n; i++) {
			T += h * (Y[i - 1] + Y[i]) / 2;
		}
		std::cout << "\n Интеграл по методу трапеций " << T << " погрешность " << F(x) << " шаг " << h << "\n";
	}
	return 0;
}

Задание 6

#include <cmath>
#include <iomanip>
#include <iostream>
using namespace std;
double f(double x) {
    return sqrt(1 + 5 * log(x)) / x;
}
double rectangle_integral(double a, double b, int n, bool ok) {
    if (!n)
        return 0.0;
    double h = (b - a) / n;
    double sum = 0.0;
    for (int i = 0; i < n; i++) {
        double x = a + i * h;
        sum += f(x);
        if (ok)
            cout << "\n Значение интеграла " << i * h << " погрешность " << f(x) << " шаг " << h << endl;
    }
    return sum * h;
}
int main() {
    setlocale(LC_ALL, "rus");
    double a = 1.0, b = 100.0, eps = 0.001;// входные параметры
    double prev_s, s;
    int n = 1;// можно задать своё N, тогда цикл while не нужен, он здесь чтобы увеличить точность вычислений
    std::cout << "\n Введите точность ";
    std::cin >> n;
    prev_s = rectangle_integral(a, b, n, false);
    rectangle_integral(a, b, n, true);

    std::cout << "EPS: " << eps << endl;
    std::cout << fixed << setprecision(3) << prev_s << endl;
    return 0;
}
